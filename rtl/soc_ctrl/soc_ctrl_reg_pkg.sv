// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package soc_ctrl_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 5;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [31:0] q;
  } soc_ctrl_reg2hw_bootaddr_reg_t;

  typedef struct packed {
    logic        q;
  } soc_ctrl_reg2hw_fetchen_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } soc_ctrl_reg2hw_corestatus_reg_t;

  typedef struct packed {
    logic        q;
  } soc_ctrl_reg2hw_bootmode_reg_t;

  typedef struct packed {
    logic        q;
  } soc_ctrl_reg2hw_sram_dly_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } soc_ctrl_reg2hw_restart_counter_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } soc_ctrl_reg2hw_bootaddr_after_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } soc_ctrl_hw2reg_fetchen_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } soc_ctrl_hw2reg_bootmode_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } soc_ctrl_hw2reg_restart_counter_reg_t;

  // Register -> HW type
  typedef struct packed {
    soc_ctrl_reg2hw_bootaddr_reg_t bootaddr; // [130:99]
    soc_ctrl_reg2hw_fetchen_reg_t fetchen; // [98:98]
    soc_ctrl_reg2hw_corestatus_reg_t corestatus; // [97:66]
    soc_ctrl_reg2hw_bootmode_reg_t bootmode; // [65:65]
    soc_ctrl_reg2hw_sram_dly_reg_t sram_dly; // [64:64]
    soc_ctrl_reg2hw_restart_counter_reg_t restart_counter; // [63:32]
    soc_ctrl_reg2hw_bootaddr_after_reg_t bootaddr_after; // [31:0]
  } soc_ctrl_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    soc_ctrl_hw2reg_fetchen_reg_t fetchen; // [36:35]
    soc_ctrl_hw2reg_bootmode_reg_t bootmode; // [34:33]
    soc_ctrl_hw2reg_restart_counter_reg_t restart_counter; // [32:0]
  } soc_ctrl_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] SOC_CTRL_BOOTADDR_OFFSET = 5'h 0;
  parameter logic [BlockAw-1:0] SOC_CTRL_FETCHEN_OFFSET = 5'h 4;
  parameter logic [BlockAw-1:0] SOC_CTRL_CORESTATUS_OFFSET = 5'h 8;
  parameter logic [BlockAw-1:0] SOC_CTRL_BOOTMODE_OFFSET = 5'h c;
  parameter logic [BlockAw-1:0] SOC_CTRL_SRAM_DLY_OFFSET = 5'h 10;
  parameter logic [BlockAw-1:0] SOC_CTRL_RESTART_COUNTER_OFFSET = 5'h 14;
  parameter logic [BlockAw-1:0] SOC_CTRL_BOOTADDR_AFTER_OFFSET = 5'h 18;

  // Register index
  typedef enum int {
    SOC_CTRL_BOOTADDR,
    SOC_CTRL_FETCHEN,
    SOC_CTRL_CORESTATUS,
    SOC_CTRL_BOOTMODE,
    SOC_CTRL_SRAM_DLY,
    SOC_CTRL_RESTART_COUNTER,
    SOC_CTRL_BOOTADDR_AFTER
  } soc_ctrl_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] SOC_CTRL_PERMIT [7] = '{
    4'b 1111, // index[0] SOC_CTRL_BOOTADDR
    4'b 0001, // index[1] SOC_CTRL_FETCHEN
    4'b 1111, // index[2] SOC_CTRL_CORESTATUS
    4'b 0001, // index[3] SOC_CTRL_BOOTMODE
    4'b 0001, // index[4] SOC_CTRL_SRAM_DLY
    4'b 1111, // index[5] SOC_CTRL_RESTART_COUNTER
    4'b 1111  // index[6] SOC_CTRL_BOOTADDR_AFTER
  };

endpackage

